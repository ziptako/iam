// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.5
// Source: iam.proto

package server

import (
	"context"

	"github.com/ziptako/iam/iam"
	"github.com/ziptako/iam/internal/logic/userservice"
	"github.com/ziptako/iam/internal/svc"
)

type UserServiceServer struct {
	svcCtx *svc.ServiceContext
	iam.UnimplementedUserServiceServer
}

func NewUserServiceServer(svcCtx *svc.ServiceContext) *UserServiceServer {
	return &UserServiceServer{
		svcCtx: svcCtx,
	}
}

// CreateUser 创建新用户
func (s *UserServiceServer) CreateUser(ctx context.Context, in *iam.CreateUserRequest) (*iam.CreateUserResponse, error) {
	l := userservicelogic.NewCreateUserLogic(ctx, s.svcCtx)
	return l.CreateUser(in)
}

// GetUser 根据ID获取用户详情
func (s *UserServiceServer) GetUser(ctx context.Context, in *iam.GetUserRequest) (*iam.User, error) {
	l := userservicelogic.NewGetUserLogic(ctx, s.svcCtx)
	return l.GetUser(in)
}

// UpdateUser 更新用户信息
func (s *UserServiceServer) UpdateUser(ctx context.Context, in *iam.UpdateUserRequest) (*iam.User, error) {
	l := userservicelogic.NewUpdateUserLogic(ctx, s.svcCtx)
	return l.UpdateUser(in)
}

// DeleteUser 删除用户（软删除）
func (s *UserServiceServer) DeleteUser(ctx context.Context, in *iam.DeleteUserRequest) (*iam.DeleteUserResponse, error) {
	l := userservicelogic.NewDeleteUserLogic(ctx, s.svcCtx)
	return l.DeleteUser(in)
}

// ListUsers 分页查询用户列表
func (s *UserServiceServer) ListUsers(ctx context.Context, in *iam.ListUsersRequest) (*iam.ListUsersResponse, error) {
	l := userservicelogic.NewListUsersLogic(ctx, s.svcCtx)
	return l.ListUsers(in)
}

// AssignUserRole 为用户分配单个角色
func (s *UserServiceServer) AssignUserRole(ctx context.Context, in *iam.AssignUserRoleRequest) (*iam.AssignUserRoleResponse, error) {
	l := userservicelogic.NewAssignUserRoleLogic(ctx, s.svcCtx)
	return l.AssignUserRole(in)
}

// AssignUserRoles 为用户批量分配角色
func (s *UserServiceServer) AssignUserRoles(ctx context.Context, in *iam.AssignUserRolesRequest) (*iam.AssignUserRolesResponse, error) {
	l := userservicelogic.NewAssignUserRolesLogic(ctx, s.svcCtx)
	return l.AssignUserRoles(in)
}

// RemoveUserRole 移除用户的单个角色
func (s *UserServiceServer) RemoveUserRole(ctx context.Context, in *iam.RemoveUserRoleRequest) (*iam.RemoveUserRoleResponse, error) {
	l := userservicelogic.NewRemoveUserRoleLogic(ctx, s.svcCtx)
	return l.RemoveUserRole(in)
}

// RemoveUserRoles 批量移除用户的角色
func (s *UserServiceServer) RemoveUserRoles(ctx context.Context, in *iam.RemoveUserRolesRequest) (*iam.RemoveUserRolesResponse, error) {
	l := userservicelogic.NewRemoveUserRolesLogic(ctx, s.svcCtx)
	return l.RemoveUserRoles(in)
}

// GetUserRoles 获取用户拥有的所有角色
func (s *UserServiceServer) GetUserRoles(ctx context.Context, in *iam.GetUserRolesRequest) (*iam.GetUserRolesResponse, error) {
	l := userservicelogic.NewGetUserRolesLogic(ctx, s.svcCtx)
	return l.GetUserRoles(in)
}

// CheckUserRole 检查用户是否拥有指定角色
func (s *UserServiceServer) CheckUserRole(ctx context.Context, in *iam.CheckUserRoleRequest) (*iam.CheckUserRoleResponse, error) {
	l := userservicelogic.NewCheckUserRoleLogic(ctx, s.svcCtx)
	return l.CheckUserRole(in)
}

// CheckUserPermission 检查用户是否具备指定权限
func (s *UserServiceServer) CheckUserPermission(ctx context.Context, in *iam.CheckUserPermissionRequest) (*iam.CheckUserPermissionResponse, error) {
	l := userservicelogic.NewCheckUserPermissionLogic(ctx, s.svcCtx)
	return l.CheckUserPermission(in)
}

// GetUserByUsername 根据用户名获取用户详情
func (s *UserServiceServer) GetUserByUsername(ctx context.Context, in *iam.GetUserByUsernameRequest) (*iam.User, error) {
	l := userservicelogic.NewGetUserByUsernameLogic(ctx, s.svcCtx)
	return l.GetUserByUsername(in)
}

// VerifyPassword 验证用户密码
func (s *UserServiceServer) VerifyPassword(ctx context.Context, in *iam.VerifyPasswordRequest) (*iam.VerifyPasswordResponse, error) {
	l := userservicelogic.NewVerifyPasswordLogic(ctx, s.svcCtx)
	return l.VerifyPassword(in)
}

// ChangePassword 修改用户密码
func (s *UserServiceServer) ChangePassword(ctx context.Context, in *iam.ChangePasswordRequest) (*iam.ChangePasswordResponse, error) {
	l := userservicelogic.NewChangePasswordLogic(ctx, s.svcCtx)
	return l.ChangePassword(in)
}
