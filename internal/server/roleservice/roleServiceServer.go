// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.5
// Source: iam.proto

package server

import (
	"context"

	"github.com/ziptako/iam/iam"
	"github.com/ziptako/iam/internal/logic/roleservice"
	"github.com/ziptako/iam/internal/svc"
)

type RoleServiceServer struct {
	svcCtx *svc.ServiceContext
	iam.UnimplementedRoleServiceServer
}

func NewRoleServiceServer(svcCtx *svc.ServiceContext) *RoleServiceServer {
	return &RoleServiceServer{
		svcCtx: svcCtx,
	}
}

// CreateRole 创建新角色
func (s *RoleServiceServer) CreateRole(ctx context.Context, in *iam.CreateRoleRequest) (*iam.CreateRoleResponse, error) {
	l := roleservicelogic.NewCreateRoleLogic(ctx, s.svcCtx)
	return l.CreateRole(in)
}

// GetRole 根据ID获取角色详情
func (s *RoleServiceServer) GetRole(ctx context.Context, in *iam.GetRoleRequest) (*iam.Role, error) {
	l := roleservicelogic.NewGetRoleLogic(ctx, s.svcCtx)
	return l.GetRole(in)
}

// UpdateRole 更新角色信息
func (s *RoleServiceServer) UpdateRole(ctx context.Context, in *iam.UpdateRoleRequest) (*iam.Role, error) {
	l := roleservicelogic.NewUpdateRoleLogic(ctx, s.svcCtx)
	return l.UpdateRole(in)
}

// DeleteRole 删除角色（软删除）
func (s *RoleServiceServer) DeleteRole(ctx context.Context, in *iam.DeleteRoleRequest) (*iam.DeleteRoleResponse, error) {
	l := roleservicelogic.NewDeleteRoleLogic(ctx, s.svcCtx)
	return l.DeleteRole(in)
}

// ListRoles 分页查询角色列表
func (s *RoleServiceServer) ListRoles(ctx context.Context, in *iam.ListRolesRequest) (*iam.ListRolesResponse, error) {
	l := roleservicelogic.NewListRolesLogic(ctx, s.svcCtx)
	return l.ListRoles(in)
}

// AssignRolePermission 为角色分配单个权限
func (s *RoleServiceServer) AssignRolePermission(ctx context.Context, in *iam.AssignRolePermissionRequest) (*iam.AssignRolePermissionResponse, error) {
	l := roleservicelogic.NewAssignRolePermissionLogic(ctx, s.svcCtx)
	return l.AssignRolePermission(in)
}

// AssignRolePermissions 为角色批量分配权限
func (s *RoleServiceServer) AssignRolePermissions(ctx context.Context, in *iam.AssignRolePermissionsRequest) (*iam.AssignRolePermissionsResponse, error) {
	l := roleservicelogic.NewAssignRolePermissionsLogic(ctx, s.svcCtx)
	return l.AssignRolePermissions(in)
}

// RemoveRolePermission 移除角色的单个权限
func (s *RoleServiceServer) RemoveRolePermission(ctx context.Context, in *iam.RemoveRolePermissionRequest) (*iam.RemoveRolePermissionResponse, error) {
	l := roleservicelogic.NewRemoveRolePermissionLogic(ctx, s.svcCtx)
	return l.RemoveRolePermission(in)
}

// RemoveRolePermissions 批量移除角色的权限
func (s *RoleServiceServer) RemoveRolePermissions(ctx context.Context, in *iam.RemoveRolePermissionsRequest) (*iam.RemoveRolePermissionsResponse, error) {
	l := roleservicelogic.NewRemoveRolePermissionsLogic(ctx, s.svcCtx)
	return l.RemoveRolePermissions(in)
}

// GetRolePermissions 获取角色拥有的所有权限
func (s *RoleServiceServer) GetRolePermissions(ctx context.Context, in *iam.GetRolePermissionsRequest) (*iam.GetRolePermissionsResponse, error) {
	l := roleservicelogic.NewGetRolePermissionsLogic(ctx, s.svcCtx)
	return l.GetRolePermissions(in)
}

// CheckRolePermission 检查角色是否拥有指定权限
func (s *RoleServiceServer) CheckRolePermission(ctx context.Context, in *iam.CheckRolePermissionRequest) (*iam.CheckRolePermissionResponse, error) {
	l := roleservicelogic.NewCheckRolePermissionLogic(ctx, s.svcCtx)
	return l.CheckRolePermission(in)
}
