// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.5

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	usersFieldNames          = builder.RawFieldNames(&Users{}, true)
	usersRows                = strings.Join(usersFieldNames, ",")
	usersRowsExpectAutoSet   = strings.Join(stringx.Remove(usersFieldNames, "id", "create_at", "create_time", "created_at", "update_at", "update_time", "updated_at"), ",")
	usersRowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(usersFieldNames, "id", "create_at", "create_time", "created_at", "update_at", "update_time", "updated_at"))

	cacheIamUsersIdPrefix       = "cache:iam:users:id:"
	cacheIamUsersEmailPrefix    = "cache:iam:users:email:"
	cacheIamUsersPhonePrefix    = "cache:iam:users:phone:"
	cacheIamUsersUsernamePrefix = "cache:iam:users:username:"
)

type (
	usersModel interface {
		Insert(ctx context.Context, data *Users) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Users, error)
		FindOneByEmail(ctx context.Context, email sql.NullString) (*Users, error)
		FindOneByPhone(ctx context.Context, phone sql.NullString) (*Users, error)
		FindOneByUsername(ctx context.Context, username string) (*Users, error)
		Update(ctx context.Context, data *Users) error
		Delete(ctx context.Context, id int64) error
	}

	defaultUsersModel struct {
		sqlc.CachedConn
		table string
	}

	Users struct {
		Id           int64          `db:"id"`            // 主键ID
		Username     string         `db:"username"`      // 用户名，唯一标识
		Email        sql.NullString `db:"email"`         // 邮箱地址，唯一标识
		PasswordHash string         `db:"password_hash"` // 密码哈希值，使用加盐哈希算法存储
		Salt         string         `db:"salt"`          // 密码加盐值，用于增强密码安全性
		Nickname     sql.NullString `db:"nickname"`      // 用户昵称
		Phone        sql.NullString `db:"phone"`         // 手机号码
		CreatedAt    time.Time      `db:"created_at"`    // 创建时间
		UpdatedAt    time.Time      `db:"updated_at"`    // 更新时间，通过触发器自动维护
		DisabledAt   sql.NullTime   `db:"disabled_at"`   // 禁用时间，NULL表示未禁用
		DeletedAt    sql.NullTime   `db:"deleted_at"`    // 软删除时间，NULL表示未删除
	}
)

func newUsersModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultUsersModel {
	return &defaultUsersModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      `"iam"."users"`,
	}
}

func (m *defaultUsersModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	iamUsersEmailKey := fmt.Sprintf("%s%v", cacheIamUsersEmailPrefix, data.Email)
	iamUsersIdKey := fmt.Sprintf("%s%v", cacheIamUsersIdPrefix, id)
	iamUsersPhoneKey := fmt.Sprintf("%s%v", cacheIamUsersPhonePrefix, data.Phone)
	iamUsersUsernameKey := fmt.Sprintf("%s%v", cacheIamUsersUsernamePrefix, data.Username)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where id = $1", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, iamUsersEmailKey, iamUsersIdKey, iamUsersPhoneKey, iamUsersUsernameKey)
	return err
}

func (m *defaultUsersModel) FindOne(ctx context.Context, id int64) (*Users, error) {
	iamUsersIdKey := fmt.Sprintf("%s%v", cacheIamUsersIdPrefix, id)
	var resp Users
	err := m.QueryRowCtx(ctx, &resp, iamUsersIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where id = $1 limit 1", usersRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUsersModel) FindOneByEmail(ctx context.Context, email sql.NullString) (*Users, error) {
	iamUsersEmailKey := fmt.Sprintf("%s%v", cacheIamUsersEmailPrefix, email)
	var resp Users
	err := m.QueryRowIndexCtx(ctx, &resp, iamUsersEmailKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where email = $1 limit 1", usersRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, email); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUsersModel) FindOneByPhone(ctx context.Context, phone sql.NullString) (*Users, error) {
	iamUsersPhoneKey := fmt.Sprintf("%s%v", cacheIamUsersPhonePrefix, phone)
	var resp Users
	err := m.QueryRowIndexCtx(ctx, &resp, iamUsersPhoneKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where phone = $1 limit 1", usersRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, phone); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUsersModel) FindOneByUsername(ctx context.Context, username string) (*Users, error) {
	iamUsersUsernameKey := fmt.Sprintf("%s%v", cacheIamUsersUsernamePrefix, username)
	var resp Users
	err := m.QueryRowIndexCtx(ctx, &resp, iamUsersUsernameKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where username = $1 limit 1", usersRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, username); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUsersModel) Insert(ctx context.Context, data *Users) (sql.Result, error) {
	iamUsersEmailKey := fmt.Sprintf("%s%v", cacheIamUsersEmailPrefix, data.Email)
	iamUsersIdKey := fmt.Sprintf("%s%v", cacheIamUsersIdPrefix, data.Id)
	iamUsersPhoneKey := fmt.Sprintf("%s%v", cacheIamUsersPhonePrefix, data.Phone)
	iamUsersUsernameKey := fmt.Sprintf("%s%v", cacheIamUsersUsernamePrefix, data.Username)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values ($1, $2, $3, $4, $5, $6, $7, $8)", m.table, usersRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Username, data.Email, data.PasswordHash, data.Salt, data.Nickname, data.Phone, data.DisabledAt, data.DeletedAt)
	}, iamUsersEmailKey, iamUsersIdKey, iamUsersPhoneKey, iamUsersUsernameKey)
	return ret, err
}

func (m *defaultUsersModel) Update(ctx context.Context, newData *Users) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	iamUsersEmailKey := fmt.Sprintf("%s%v", cacheIamUsersEmailPrefix, data.Email)
	iamUsersIdKey := fmt.Sprintf("%s%v", cacheIamUsersIdPrefix, data.Id)
	iamUsersPhoneKey := fmt.Sprintf("%s%v", cacheIamUsersPhonePrefix, data.Phone)
	iamUsersUsernameKey := fmt.Sprintf("%s%v", cacheIamUsersUsernamePrefix, data.Username)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where id = $1", m.table, usersRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.Id, newData.Username, newData.Email, newData.PasswordHash, newData.Salt, newData.Nickname, newData.Phone, newData.DisabledAt, newData.DeletedAt)
	}, iamUsersEmailKey, iamUsersIdKey, iamUsersPhoneKey, iamUsersUsernameKey)
	return err
}

func (m *defaultUsersModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheIamUsersIdPrefix, primary)
}

func (m *defaultUsersModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where id = $1 limit 1", usersRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultUsersModel) tableName() string {
	return m.table
}
