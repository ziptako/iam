// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.5

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	rolesFieldNames          = builder.RawFieldNames(&Roles{}, true)
	rolesRows                = strings.Join(rolesFieldNames, ",")
	rolesRowsExpectAutoSet   = strings.Join(stringx.Remove(rolesFieldNames, "id", "create_at", "create_time", "created_at", "update_at", "update_time", "updated_at"), ",")
	rolesRowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(rolesFieldNames, "id", "create_at", "create_time", "created_at", "update_at", "update_time", "updated_at"))

	cacheIamRolesIdPrefix   = "cache:iam:roles:id:"
	cacheIamRolesCodePrefix = "cache:iam:roles:code:"
	cacheIamRolesNamePrefix = "cache:iam:roles:name:"
)

type (
	rolesModel interface {
		Insert(ctx context.Context, data *Roles) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Roles, error)
		FindOneByCode(ctx context.Context, code string) (*Roles, error)
		FindOneByName(ctx context.Context, name string) (*Roles, error)
		Update(ctx context.Context, data *Roles) error
		Delete(ctx context.Context, id int64) error
	}

	defaultRolesModel struct {
		sqlc.CachedConn
		table string
	}

	Roles struct {
		Id          int64          `db:"id"`          // 主键ID
		Name        string         `db:"name"`        // 角色名称
		Code        string         `db:"code"`        // 角色编码，唯一标识
		Description sql.NullString `db:"description"` // 角色描述
		SortOrder   int64          `db:"sort_order"`  // 排序顺序
		CreatedAt   time.Time      `db:"created_at"`  // 创建时间
		UpdatedAt   time.Time      `db:"updated_at"`  // 更新时间，通过触发器自动维护
		DisabledAt  sql.NullTime   `db:"disabled_at"` // 禁用时间，NULL表示未禁用
		DeletedAt   sql.NullTime   `db:"deleted_at"`  // 软删除时间，NULL表示未删除
	}
)

func newRolesModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultRolesModel {
	return &defaultRolesModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      `"iam"."roles"`,
	}
}

func (m *defaultRolesModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	iamRolesCodeKey := fmt.Sprintf("%s%v", cacheIamRolesCodePrefix, data.Code)
	iamRolesIdKey := fmt.Sprintf("%s%v", cacheIamRolesIdPrefix, id)
	iamRolesNameKey := fmt.Sprintf("%s%v", cacheIamRolesNamePrefix, data.Name)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where id = $1", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, iamRolesCodeKey, iamRolesIdKey, iamRolesNameKey)
	return err
}

func (m *defaultRolesModel) FindOne(ctx context.Context, id int64) (*Roles, error) {
	iamRolesIdKey := fmt.Sprintf("%s%v", cacheIamRolesIdPrefix, id)
	var resp Roles
	err := m.QueryRowCtx(ctx, &resp, iamRolesIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where id = $1 limit 1", rolesRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultRolesModel) FindOneByCode(ctx context.Context, code string) (*Roles, error) {
	iamRolesCodeKey := fmt.Sprintf("%s%v", cacheIamRolesCodePrefix, code)
	var resp Roles
	err := m.QueryRowIndexCtx(ctx, &resp, iamRolesCodeKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where code = $1 limit 1", rolesRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, code); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultRolesModel) FindOneByName(ctx context.Context, name string) (*Roles, error) {
	iamRolesNameKey := fmt.Sprintf("%s%v", cacheIamRolesNamePrefix, name)
	var resp Roles
	err := m.QueryRowIndexCtx(ctx, &resp, iamRolesNameKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where name = $1 limit 1", rolesRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, name); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultRolesModel) Insert(ctx context.Context, data *Roles) (sql.Result, error) {
	iamRolesCodeKey := fmt.Sprintf("%s%v", cacheIamRolesCodePrefix, data.Code)
	iamRolesIdKey := fmt.Sprintf("%s%v", cacheIamRolesIdPrefix, data.Id)
	iamRolesNameKey := fmt.Sprintf("%s%v", cacheIamRolesNamePrefix, data.Name)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values ($1, $2, $3, $4, $5, $6)", m.table, rolesRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Name, data.Code, data.Description, data.SortOrder, data.DisabledAt, data.DeletedAt)
	}, iamRolesCodeKey, iamRolesIdKey, iamRolesNameKey)
	return ret, err
}

func (m *defaultRolesModel) Update(ctx context.Context, newData *Roles) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	iamRolesCodeKey := fmt.Sprintf("%s%v", cacheIamRolesCodePrefix, data.Code)
	iamRolesIdKey := fmt.Sprintf("%s%v", cacheIamRolesIdPrefix, data.Id)
	iamRolesNameKey := fmt.Sprintf("%s%v", cacheIamRolesNamePrefix, data.Name)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where id = $1", m.table, rolesRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.Id, newData.Name, newData.Code, newData.Description, newData.SortOrder, newData.DisabledAt, newData.DeletedAt)
	}, iamRolesCodeKey, iamRolesIdKey, iamRolesNameKey)
	return err
}

func (m *defaultRolesModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheIamRolesIdPrefix, primary)
}

func (m *defaultRolesModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where id = $1 limit 1", rolesRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultRolesModel) tableName() string {
	return m.table
}
