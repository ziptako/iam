// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.5

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	userRolesFieldNames          = builder.RawFieldNames(&UserRoles{}, true)
	userRolesRows                = strings.Join(userRolesFieldNames, ",")
	userRolesRowsExpectAutoSet   = strings.Join(stringx.Remove(userRolesFieldNames, "id", "create_at", "create_time", "created_at", "update_at", "update_time", "updated_at"), ",")
	userRolesRowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(userRolesFieldNames, "id", "create_at", "create_time", "created_at", "update_at", "update_time", "updated_at"))

	cacheIamUserRolesIdPrefix           = "cache:iam:userRoles:id:"
	cacheIamUserRolesUserIdRoleIdPrefix = "cache:iam:userRoles:userId:roleId:"
)

type (
	userRolesModel interface {
		Insert(ctx context.Context, data *UserRoles) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*UserRoles, error)
		FindOneByUserIdRoleId(ctx context.Context, userId int64, roleId int64) (*UserRoles, error)
		Update(ctx context.Context, data *UserRoles) error
		Delete(ctx context.Context, id int64) error
	}

	defaultUserRolesModel struct {
		sqlc.CachedConn
		table string
	}

	UserRoles struct {
		Id        int64         `db:"id"`         // 主键ID
		UserId    int64         `db:"user_id"`    // 用户ID，外键关联users表
		RoleId    int64         `db:"role_id"`    // 角色ID，外键关联roles表
		CreatedAt time.Time     `db:"created_at"` // 关联创建时间
		CreatedBy sql.NullInt64 `db:"created_by"` // 创建人ID
	}
)

func newUserRolesModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultUserRolesModel {
	return &defaultUserRolesModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      `"iam"."user_roles"`,
	}
}

func (m *defaultUserRolesModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	iamUserRolesIdKey := fmt.Sprintf("%s%v", cacheIamUserRolesIdPrefix, id)
	iamUserRolesUserIdRoleIdKey := fmt.Sprintf("%s%v:%v", cacheIamUserRolesUserIdRoleIdPrefix, data.UserId, data.RoleId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where id = $1", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, iamUserRolesIdKey, iamUserRolesUserIdRoleIdKey)
	return err
}

func (m *defaultUserRolesModel) FindOne(ctx context.Context, id int64) (*UserRoles, error) {
	iamUserRolesIdKey := fmt.Sprintf("%s%v", cacheIamUserRolesIdPrefix, id)
	var resp UserRoles
	err := m.QueryRowCtx(ctx, &resp, iamUserRolesIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where id = $1 limit 1", userRolesRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserRolesModel) FindOneByUserIdRoleId(ctx context.Context, userId int64, roleId int64) (*UserRoles, error) {
	iamUserRolesUserIdRoleIdKey := fmt.Sprintf("%s%v:%v", cacheIamUserRolesUserIdRoleIdPrefix, userId, roleId)
	var resp UserRoles
	err := m.QueryRowIndexCtx(ctx, &resp, iamUserRolesUserIdRoleIdKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where user_id = $1 and role_id = $2 limit 1", userRolesRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, userId, roleId); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserRolesModel) Insert(ctx context.Context, data *UserRoles) (sql.Result, error) {
	iamUserRolesIdKey := fmt.Sprintf("%s%v", cacheIamUserRolesIdPrefix, data.Id)
	iamUserRolesUserIdRoleIdKey := fmt.Sprintf("%s%v:%v", cacheIamUserRolesUserIdRoleIdPrefix, data.UserId, data.RoleId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values ($1, $2, $3)", m.table, userRolesRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.UserId, data.RoleId, data.CreatedBy)
	}, iamUserRolesIdKey, iamUserRolesUserIdRoleIdKey)
	return ret, err
}

func (m *defaultUserRolesModel) Update(ctx context.Context, newData *UserRoles) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	iamUserRolesIdKey := fmt.Sprintf("%s%v", cacheIamUserRolesIdPrefix, data.Id)
	iamUserRolesUserIdRoleIdKey := fmt.Sprintf("%s%v:%v", cacheIamUserRolesUserIdRoleIdPrefix, data.UserId, data.RoleId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where id = $1", m.table, userRolesRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.Id, newData.UserId, newData.RoleId, newData.CreatedBy)
	}, iamUserRolesIdKey, iamUserRolesUserIdRoleIdKey)
	return err
}

func (m *defaultUserRolesModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheIamUserRolesIdPrefix, primary)
}

func (m *defaultUserRolesModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where id = $1 limit 1", userRolesRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultUserRolesModel) tableName() string {
	return m.table
}
