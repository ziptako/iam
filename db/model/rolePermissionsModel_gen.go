// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.5

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	rolePermissionsFieldNames          = builder.RawFieldNames(&RolePermissions{}, true)
	rolePermissionsRows                = strings.Join(rolePermissionsFieldNames, ",")
	rolePermissionsRowsExpectAutoSet   = strings.Join(stringx.Remove(rolePermissionsFieldNames, "id", "create_at", "create_time", "created_at", "update_at", "update_time", "updated_at"), ",")
	rolePermissionsRowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(rolePermissionsFieldNames, "id", "create_at", "create_time", "created_at", "update_at", "update_time", "updated_at"))

	cacheIamRolePermissionsIdPrefix                 = "cache:iam:rolePermissions:id:"
	cacheIamRolePermissionsRoleIdPermissionIdPrefix = "cache:iam:rolePermissions:roleId:permissionId:"
)

type (
	rolePermissionsModel interface {
		Insert(ctx context.Context, data *RolePermissions) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*RolePermissions, error)
		FindOneByRoleIdPermissionId(ctx context.Context, roleId int64, permissionId int64) (*RolePermissions, error)
		Update(ctx context.Context, data *RolePermissions) error
		Delete(ctx context.Context, id int64) error
	}

	defaultRolePermissionsModel struct {
		sqlc.CachedConn
		table string
	}

	RolePermissions struct {
		Id           int64         `db:"id"`            // 主键ID
		RoleId       int64         `db:"role_id"`       // 角色ID，外键关联roles表
		PermissionId int64         `db:"permission_id"` // 权限ID，外键关联permissions表
		CreatedAt    time.Time     `db:"created_at"`    // 关联创建时间
		CreatedBy    sql.NullInt64 `db:"created_by"`    // 创建人ID
	}
)

func newRolePermissionsModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultRolePermissionsModel {
	return &defaultRolePermissionsModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      `"iam"."role_permissions"`,
	}
}

func (m *defaultRolePermissionsModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	iamRolePermissionsIdKey := fmt.Sprintf("%s%v", cacheIamRolePermissionsIdPrefix, id)
	iamRolePermissionsRoleIdPermissionIdKey := fmt.Sprintf("%s%v:%v", cacheIamRolePermissionsRoleIdPermissionIdPrefix, data.RoleId, data.PermissionId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where id = $1", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, iamRolePermissionsIdKey, iamRolePermissionsRoleIdPermissionIdKey)
	return err
}

func (m *defaultRolePermissionsModel) FindOne(ctx context.Context, id int64) (*RolePermissions, error) {
	iamRolePermissionsIdKey := fmt.Sprintf("%s%v", cacheIamRolePermissionsIdPrefix, id)
	var resp RolePermissions
	err := m.QueryRowCtx(ctx, &resp, iamRolePermissionsIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where id = $1 limit 1", rolePermissionsRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultRolePermissionsModel) FindOneByRoleIdPermissionId(ctx context.Context, roleId int64, permissionId int64) (*RolePermissions, error) {
	iamRolePermissionsRoleIdPermissionIdKey := fmt.Sprintf("%s%v:%v", cacheIamRolePermissionsRoleIdPermissionIdPrefix, roleId, permissionId)
	var resp RolePermissions
	err := m.QueryRowIndexCtx(ctx, &resp, iamRolePermissionsRoleIdPermissionIdKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where role_id = $1 and permission_id = $2 limit 1", rolePermissionsRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, roleId, permissionId); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultRolePermissionsModel) Insert(ctx context.Context, data *RolePermissions) (sql.Result, error) {
	iamRolePermissionsIdKey := fmt.Sprintf("%s%v", cacheIamRolePermissionsIdPrefix, data.Id)
	iamRolePermissionsRoleIdPermissionIdKey := fmt.Sprintf("%s%v:%v", cacheIamRolePermissionsRoleIdPermissionIdPrefix, data.RoleId, data.PermissionId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values ($1, $2, $3)", m.table, rolePermissionsRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.RoleId, data.PermissionId, data.CreatedBy)
	}, iamRolePermissionsIdKey, iamRolePermissionsRoleIdPermissionIdKey)
	return ret, err
}

func (m *defaultRolePermissionsModel) Update(ctx context.Context, newData *RolePermissions) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	iamRolePermissionsIdKey := fmt.Sprintf("%s%v", cacheIamRolePermissionsIdPrefix, data.Id)
	iamRolePermissionsRoleIdPermissionIdKey := fmt.Sprintf("%s%v:%v", cacheIamRolePermissionsRoleIdPermissionIdPrefix, data.RoleId, data.PermissionId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where id = $1", m.table, rolePermissionsRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.Id, newData.RoleId, newData.PermissionId, newData.CreatedBy)
	}, iamRolePermissionsIdKey, iamRolePermissionsRoleIdPermissionIdKey)
	return err
}

func (m *defaultRolePermissionsModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheIamRolePermissionsIdPrefix, primary)
}

func (m *defaultRolePermissionsModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where id = $1 limit 1", rolePermissionsRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultRolePermissionsModel) tableName() string {
	return m.table
}
