// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.5

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	permissionsFieldNames          = builder.RawFieldNames(&Permissions{}, true)
	permissionsRows                = strings.Join(permissionsFieldNames, ",")
	permissionsRowsExpectAutoSet   = strings.Join(stringx.Remove(permissionsFieldNames, "id", "create_at", "create_time", "created_at", "update_at", "update_time", "updated_at"), ",")
	permissionsRowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(permissionsFieldNames, "id", "create_at", "create_time", "created_at", "update_at", "update_time", "updated_at"))

	cacheIamPermissionsIdPrefix                           = "cache:iam:permissions:id:"
	cacheIamPermissionsCodePrefix                         = "cache:iam:permissions:code:"
	cacheIamPermissionsResourceActionTypeHttpMethodPrefix = "cache:iam:permissions:resource:action:type:httpMethod:"
)

type (
	permissionsModel interface {
		Insert(ctx context.Context, data *Permissions) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Permissions, error)
		FindOneByCode(ctx context.Context, code string) (*Permissions, error)
		FindOneByResourceActionTypeHttpMethod(ctx context.Context, resource string, action string, tp string, httpMethod sql.NullString) (*Permissions, error)
		Update(ctx context.Context, data *Permissions) error
		Delete(ctx context.Context, id int64) error
	}

	defaultPermissionsModel struct {
		sqlc.CachedConn
		table string
	}

	Permissions struct {
		Id          int64          `db:"id"`          // 主键ID
		Name        string         `db:"name"`        // 权限名称
		Code        string         `db:"code"`        // 权限编码，唯一标识
		Type        string         `db:"type"`        // 权限类型：path-API路径权限，button-按钮权限，menu-菜单权限
		Resource    string         `db:"resource"`    // 资源标识
		Action      string         `db:"action"`      // 操作类型
		HttpMethod  sql.NullString `db:"http_method"` // HTTP方法：GET、POST、PUT、DELETE，仅path类型权限需要
		Description sql.NullString `db:"description"` // 权限描述
		CreatedAt   time.Time      `db:"created_at"`  // 创建时间
		UpdatedAt   time.Time      `db:"updated_at"`  // 更新时间，通过触发器自动维护
	}
)

func newPermissionsModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultPermissionsModel {
	return &defaultPermissionsModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      `"iam"."permissions"`,
	}
}

func (m *defaultPermissionsModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	iamPermissionsCodeKey := fmt.Sprintf("%s%v", cacheIamPermissionsCodePrefix, data.Code)
	iamPermissionsIdKey := fmt.Sprintf("%s%v", cacheIamPermissionsIdPrefix, id)
	iamPermissionsResourceActionTypeHttpMethodKey := fmt.Sprintf("%s%v:%v:%v:%v", cacheIamPermissionsResourceActionTypeHttpMethodPrefix, data.Resource, data.Action, data.Type, data.HttpMethod)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where id = $1", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, iamPermissionsCodeKey, iamPermissionsIdKey, iamPermissionsResourceActionTypeHttpMethodKey)
	return err
}

func (m *defaultPermissionsModel) FindOne(ctx context.Context, id int64) (*Permissions, error) {
	iamPermissionsIdKey := fmt.Sprintf("%s%v", cacheIamPermissionsIdPrefix, id)
	var resp Permissions
	err := m.QueryRowCtx(ctx, &resp, iamPermissionsIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where id = $1 limit 1", permissionsRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultPermissionsModel) FindOneByCode(ctx context.Context, code string) (*Permissions, error) {
	iamPermissionsCodeKey := fmt.Sprintf("%s%v", cacheIamPermissionsCodePrefix, code)
	var resp Permissions
	err := m.QueryRowIndexCtx(ctx, &resp, iamPermissionsCodeKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where code = $1 limit 1", permissionsRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, code); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultPermissionsModel) FindOneByResourceActionTypeHttpMethod(ctx context.Context, resource string, action string, tp string, httpMethod sql.NullString) (*Permissions, error) {
	iamPermissionsResourceActionTypeHttpMethodKey := fmt.Sprintf("%s%v:%v:%v:%v", cacheIamPermissionsResourceActionTypeHttpMethodPrefix, resource, action, tp, httpMethod)
	var resp Permissions
	err := m.QueryRowIndexCtx(ctx, &resp, iamPermissionsResourceActionTypeHttpMethodKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where resource = $1 and action = $2 and type = $3 and http_method = $4 limit 1", permissionsRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, resource, action, tp, httpMethod); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultPermissionsModel) Insert(ctx context.Context, data *Permissions) (sql.Result, error) {
	iamPermissionsCodeKey := fmt.Sprintf("%s%v", cacheIamPermissionsCodePrefix, data.Code)
	iamPermissionsIdKey := fmt.Sprintf("%s%v", cacheIamPermissionsIdPrefix, data.Id)
	iamPermissionsResourceActionTypeHttpMethodKey := fmt.Sprintf("%s%v:%v:%v:%v", cacheIamPermissionsResourceActionTypeHttpMethodPrefix, data.Resource, data.Action, data.Type, data.HttpMethod)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values ($1, $2, $3, $4, $5, $6, $7)", m.table, permissionsRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Name, data.Code, data.Type, data.Resource, data.Action, data.HttpMethod, data.Description)
	}, iamPermissionsCodeKey, iamPermissionsIdKey, iamPermissionsResourceActionTypeHttpMethodKey)
	return ret, err
}

func (m *defaultPermissionsModel) Update(ctx context.Context, newData *Permissions) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	iamPermissionsCodeKey := fmt.Sprintf("%s%v", cacheIamPermissionsCodePrefix, data.Code)
	iamPermissionsIdKey := fmt.Sprintf("%s%v", cacheIamPermissionsIdPrefix, data.Id)
	iamPermissionsResourceActionTypeHttpMethodKey := fmt.Sprintf("%s%v:%v:%v:%v", cacheIamPermissionsResourceActionTypeHttpMethodPrefix, data.Resource, data.Action, data.Type, data.HttpMethod)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where id = $1", m.table, permissionsRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.Id, newData.Name, newData.Code, newData.Type, newData.Resource, newData.Action, newData.HttpMethod, newData.Description)
	}, iamPermissionsCodeKey, iamPermissionsIdKey, iamPermissionsResourceActionTypeHttpMethodKey)
	return err
}

func (m *defaultPermissionsModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheIamPermissionsIdPrefix, primary)
}

func (m *defaultPermissionsModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where id = $1 limit 1", permissionsRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultPermissionsModel) tableName() string {
	return m.table
}
