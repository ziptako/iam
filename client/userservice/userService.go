// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.5
// Source: iam.proto

package userservice

import (
	"context"

	"github.com/ziptako/iam/iam"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	AssignRolePermissionRequest   = iam.AssignRolePermissionRequest
	AssignRolePermissionResponse  = iam.AssignRolePermissionResponse
	AssignRolePermissionsRequest  = iam.AssignRolePermissionsRequest
	AssignRolePermissionsResponse = iam.AssignRolePermissionsResponse
	AssignUserRoleRequest         = iam.AssignUserRoleRequest
	AssignUserRoleResponse        = iam.AssignUserRoleResponse
	AssignUserRolesRequest        = iam.AssignUserRolesRequest
	AssignUserRolesResponse       = iam.AssignUserRolesResponse
	ChangePasswordRequest         = iam.ChangePasswordRequest
	ChangePasswordResponse        = iam.ChangePasswordResponse
	CheckRolePermissionRequest    = iam.CheckRolePermissionRequest
	CheckRolePermissionResponse   = iam.CheckRolePermissionResponse
	CheckUserPermissionRequest    = iam.CheckUserPermissionRequest
	CheckUserPermissionResponse   = iam.CheckUserPermissionResponse
	CheckUserRoleRequest          = iam.CheckUserRoleRequest
	CheckUserRoleResponse         = iam.CheckUserRoleResponse
	CreatePermissionRequest       = iam.CreatePermissionRequest
	CreatePermissionResponse      = iam.CreatePermissionResponse
	CreateRoleRequest             = iam.CreateRoleRequest
	CreateRoleResponse            = iam.CreateRoleResponse
	CreateUserRequest             = iam.CreateUserRequest
	CreateUserResponse            = iam.CreateUserResponse
	DeletePermissionRequest       = iam.DeletePermissionRequest
	DeletePermissionResponse      = iam.DeletePermissionResponse
	DeleteRoleRequest             = iam.DeleteRoleRequest
	DeleteRoleResponse            = iam.DeleteRoleResponse
	DeleteUserRequest             = iam.DeleteUserRequest
	DeleteUserResponse            = iam.DeleteUserResponse
	GetPermissionRequest          = iam.GetPermissionRequest
	GetRolePermissionsRequest     = iam.GetRolePermissionsRequest
	GetRolePermissionsResponse    = iam.GetRolePermissionsResponse
	GetRoleRequest                = iam.GetRoleRequest
	GetUserByUsernameRequest      = iam.GetUserByUsernameRequest
	GetUserRequest                = iam.GetUserRequest
	GetUserRolesRequest           = iam.GetUserRolesRequest
	GetUserRolesResponse          = iam.GetUserRolesResponse
	ListPermissionsRequest        = iam.ListPermissionsRequest
	ListPermissionsResponse       = iam.ListPermissionsResponse
	ListRolesRequest              = iam.ListRolesRequest
	ListRolesResponse             = iam.ListRolesResponse
	ListUsersRequest              = iam.ListUsersRequest
	ListUsersResponse             = iam.ListUsersResponse
	Permission                    = iam.Permission
	RemoveRolePermissionRequest   = iam.RemoveRolePermissionRequest
	RemoveRolePermissionResponse  = iam.RemoveRolePermissionResponse
	RemoveRolePermissionsRequest  = iam.RemoveRolePermissionsRequest
	RemoveRolePermissionsResponse = iam.RemoveRolePermissionsResponse
	RemoveUserRoleRequest         = iam.RemoveUserRoleRequest
	RemoveUserRoleResponse        = iam.RemoveUserRoleResponse
	RemoveUserRolesRequest        = iam.RemoveUserRolesRequest
	RemoveUserRolesResponse       = iam.RemoveUserRolesResponse
	Role                          = iam.Role
	UpdatePermissionRequest       = iam.UpdatePermissionRequest
	UpdateRoleRequest             = iam.UpdateRoleRequest
	UpdateUserRequest             = iam.UpdateUserRequest
	User                          = iam.User
	VerifyPasswordRequest         = iam.VerifyPasswordRequest
	VerifyPasswordResponse        = iam.VerifyPasswordResponse

	UserService interface {
		// CreateUser 创建新用户
		CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error)
		// GetUser 根据ID获取用户详情
		GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*User, error)
		// UpdateUser 更新用户信息
		UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*User, error)
		// DeleteUser 删除用户（软删除）
		DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*DeleteUserResponse, error)
		// ListUsers 分页查询用户列表
		ListUsers(ctx context.Context, in *ListUsersRequest, opts ...grpc.CallOption) (*ListUsersResponse, error)
		// AssignUserRole 为用户分配单个角色
		AssignUserRole(ctx context.Context, in *AssignUserRoleRequest, opts ...grpc.CallOption) (*AssignUserRoleResponse, error)
		// AssignUserRoles 为用户批量分配角色
		AssignUserRoles(ctx context.Context, in *AssignUserRolesRequest, opts ...grpc.CallOption) (*AssignUserRolesResponse, error)
		// RemoveUserRole 移除用户的单个角色
		RemoveUserRole(ctx context.Context, in *RemoveUserRoleRequest, opts ...grpc.CallOption) (*RemoveUserRoleResponse, error)
		// RemoveUserRoles 批量移除用户的角色
		RemoveUserRoles(ctx context.Context, in *RemoveUserRolesRequest, opts ...grpc.CallOption) (*RemoveUserRolesResponse, error)
		// GetUserRoles 获取用户拥有的所有角色
		GetUserRoles(ctx context.Context, in *GetUserRolesRequest, opts ...grpc.CallOption) (*GetUserRolesResponse, error)
		// CheckUserRole 检查用户是否拥有指定角色
		CheckUserRole(ctx context.Context, in *CheckUserRoleRequest, opts ...grpc.CallOption) (*CheckUserRoleResponse, error)
		// CheckUserPermission 检查用户是否具备指定权限
		CheckUserPermission(ctx context.Context, in *CheckUserPermissionRequest, opts ...grpc.CallOption) (*CheckUserPermissionResponse, error)
		// GetUserByUsername 根据用户名获取用户详情
		GetUserByUsername(ctx context.Context, in *GetUserByUsernameRequest, opts ...grpc.CallOption) (*User, error)
		// VerifyPassword 验证用户密码
		VerifyPassword(ctx context.Context, in *VerifyPasswordRequest, opts ...grpc.CallOption) (*VerifyPasswordResponse, error)
		// ChangePassword 修改用户密码
		ChangePassword(ctx context.Context, in *ChangePasswordRequest, opts ...grpc.CallOption) (*ChangePasswordResponse, error)
	}

	defaultUserService struct {
		cli zrpc.Client
	}
)

func NewUserService(cli zrpc.Client) UserService {
	return &defaultUserService{
		cli: cli,
	}
}

// CreateUser 创建新用户
func (m *defaultUserService) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error) {
	client := iam.NewUserServiceClient(m.cli.Conn())
	return client.CreateUser(ctx, in, opts...)
}

// GetUser 根据ID获取用户详情
func (m *defaultUserService) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*User, error) {
	client := iam.NewUserServiceClient(m.cli.Conn())
	return client.GetUser(ctx, in, opts...)
}

// UpdateUser 更新用户信息
func (m *defaultUserService) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*User, error) {
	client := iam.NewUserServiceClient(m.cli.Conn())
	return client.UpdateUser(ctx, in, opts...)
}

// DeleteUser 删除用户（软删除）
func (m *defaultUserService) DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*DeleteUserResponse, error) {
	client := iam.NewUserServiceClient(m.cli.Conn())
	return client.DeleteUser(ctx, in, opts...)
}

// ListUsers 分页查询用户列表
func (m *defaultUserService) ListUsers(ctx context.Context, in *ListUsersRequest, opts ...grpc.CallOption) (*ListUsersResponse, error) {
	client := iam.NewUserServiceClient(m.cli.Conn())
	return client.ListUsers(ctx, in, opts...)
}

// AssignUserRole 为用户分配单个角色
func (m *defaultUserService) AssignUserRole(ctx context.Context, in *AssignUserRoleRequest, opts ...grpc.CallOption) (*AssignUserRoleResponse, error) {
	client := iam.NewUserServiceClient(m.cli.Conn())
	return client.AssignUserRole(ctx, in, opts...)
}

// AssignUserRoles 为用户批量分配角色
func (m *defaultUserService) AssignUserRoles(ctx context.Context, in *AssignUserRolesRequest, opts ...grpc.CallOption) (*AssignUserRolesResponse, error) {
	client := iam.NewUserServiceClient(m.cli.Conn())
	return client.AssignUserRoles(ctx, in, opts...)
}

// RemoveUserRole 移除用户的单个角色
func (m *defaultUserService) RemoveUserRole(ctx context.Context, in *RemoveUserRoleRequest, opts ...grpc.CallOption) (*RemoveUserRoleResponse, error) {
	client := iam.NewUserServiceClient(m.cli.Conn())
	return client.RemoveUserRole(ctx, in, opts...)
}

// RemoveUserRoles 批量移除用户的角色
func (m *defaultUserService) RemoveUserRoles(ctx context.Context, in *RemoveUserRolesRequest, opts ...grpc.CallOption) (*RemoveUserRolesResponse, error) {
	client := iam.NewUserServiceClient(m.cli.Conn())
	return client.RemoveUserRoles(ctx, in, opts...)
}

// GetUserRoles 获取用户拥有的所有角色
func (m *defaultUserService) GetUserRoles(ctx context.Context, in *GetUserRolesRequest, opts ...grpc.CallOption) (*GetUserRolesResponse, error) {
	client := iam.NewUserServiceClient(m.cli.Conn())
	return client.GetUserRoles(ctx, in, opts...)
}

// CheckUserRole 检查用户是否拥有指定角色
func (m *defaultUserService) CheckUserRole(ctx context.Context, in *CheckUserRoleRequest, opts ...grpc.CallOption) (*CheckUserRoleResponse, error) {
	client := iam.NewUserServiceClient(m.cli.Conn())
	return client.CheckUserRole(ctx, in, opts...)
}

// CheckUserPermission 检查用户是否具备指定权限
func (m *defaultUserService) CheckUserPermission(ctx context.Context, in *CheckUserPermissionRequest, opts ...grpc.CallOption) (*CheckUserPermissionResponse, error) {
	client := iam.NewUserServiceClient(m.cli.Conn())
	return client.CheckUserPermission(ctx, in, opts...)
}

// GetUserByUsername 根据用户名获取用户详情
func (m *defaultUserService) GetUserByUsername(ctx context.Context, in *GetUserByUsernameRequest, opts ...grpc.CallOption) (*User, error) {
	client := iam.NewUserServiceClient(m.cli.Conn())
	return client.GetUserByUsername(ctx, in, opts...)
}

// VerifyPassword 验证用户密码
func (m *defaultUserService) VerifyPassword(ctx context.Context, in *VerifyPasswordRequest, opts ...grpc.CallOption) (*VerifyPasswordResponse, error) {
	client := iam.NewUserServiceClient(m.cli.Conn())
	return client.VerifyPassword(ctx, in, opts...)
}

// ChangePassword 修改用户密码
func (m *defaultUserService) ChangePassword(ctx context.Context, in *ChangePasswordRequest, opts ...grpc.CallOption) (*ChangePasswordResponse, error) {
	client := iam.NewUserServiceClient(m.cli.Conn())
	return client.ChangePassword(ctx, in, opts...)
}
