// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.5
// Source: iam.proto

package roleservice

import (
	"context"

	"github.com/ziptako/iam/iam"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	AssignRolePermissionRequest   = iam.AssignRolePermissionRequest
	AssignRolePermissionResponse  = iam.AssignRolePermissionResponse
	AssignRolePermissionsRequest  = iam.AssignRolePermissionsRequest
	AssignRolePermissionsResponse = iam.AssignRolePermissionsResponse
	AssignUserRoleRequest         = iam.AssignUserRoleRequest
	AssignUserRoleResponse        = iam.AssignUserRoleResponse
	AssignUserRolesRequest        = iam.AssignUserRolesRequest
	AssignUserRolesResponse       = iam.AssignUserRolesResponse
	ChangePasswordRequest         = iam.ChangePasswordRequest
	ChangePasswordResponse        = iam.ChangePasswordResponse
	CheckRolePermissionRequest    = iam.CheckRolePermissionRequest
	CheckRolePermissionResponse   = iam.CheckRolePermissionResponse
	CheckUserPermissionRequest    = iam.CheckUserPermissionRequest
	CheckUserPermissionResponse   = iam.CheckUserPermissionResponse
	CheckUserRoleRequest          = iam.CheckUserRoleRequest
	CheckUserRoleResponse         = iam.CheckUserRoleResponse
	CreatePermissionRequest       = iam.CreatePermissionRequest
	CreatePermissionResponse      = iam.CreatePermissionResponse
	CreateRoleRequest             = iam.CreateRoleRequest
	CreateRoleResponse            = iam.CreateRoleResponse
	CreateUserRequest             = iam.CreateUserRequest
	CreateUserResponse            = iam.CreateUserResponse
	DeletePermissionRequest       = iam.DeletePermissionRequest
	DeletePermissionResponse      = iam.DeletePermissionResponse
	DeleteRoleRequest             = iam.DeleteRoleRequest
	DeleteRoleResponse            = iam.DeleteRoleResponse
	DeleteUserRequest             = iam.DeleteUserRequest
	DeleteUserResponse            = iam.DeleteUserResponse
	GetPermissionRequest          = iam.GetPermissionRequest
	GetRolePermissionsRequest     = iam.GetRolePermissionsRequest
	GetRolePermissionsResponse    = iam.GetRolePermissionsResponse
	GetRoleRequest                = iam.GetRoleRequest
	GetUserByUsernameRequest      = iam.GetUserByUsernameRequest
	GetUserRequest                = iam.GetUserRequest
	GetUserRolesRequest           = iam.GetUserRolesRequest
	GetUserRolesResponse          = iam.GetUserRolesResponse
	ListPermissionsRequest        = iam.ListPermissionsRequest
	ListPermissionsResponse       = iam.ListPermissionsResponse
	ListRolesRequest              = iam.ListRolesRequest
	ListRolesResponse             = iam.ListRolesResponse
	ListUsersRequest              = iam.ListUsersRequest
	ListUsersResponse             = iam.ListUsersResponse
	Permission                    = iam.Permission
	RemoveRolePermissionRequest   = iam.RemoveRolePermissionRequest
	RemoveRolePermissionResponse  = iam.RemoveRolePermissionResponse
	RemoveRolePermissionsRequest  = iam.RemoveRolePermissionsRequest
	RemoveRolePermissionsResponse = iam.RemoveRolePermissionsResponse
	RemoveUserRoleRequest         = iam.RemoveUserRoleRequest
	RemoveUserRoleResponse        = iam.RemoveUserRoleResponse
	RemoveUserRolesRequest        = iam.RemoveUserRolesRequest
	RemoveUserRolesResponse       = iam.RemoveUserRolesResponse
	Role                          = iam.Role
	UpdatePermissionRequest       = iam.UpdatePermissionRequest
	UpdateRoleRequest             = iam.UpdateRoleRequest
	UpdateUserRequest             = iam.UpdateUserRequest
	User                          = iam.User
	VerifyPasswordRequest         = iam.VerifyPasswordRequest
	VerifyPasswordResponse        = iam.VerifyPasswordResponse

	RoleService interface {
		// CreateRole 创建新角色
		CreateRole(ctx context.Context, in *CreateRoleRequest, opts ...grpc.CallOption) (*CreateRoleResponse, error)
		// GetRole 根据ID获取角色详情
		GetRole(ctx context.Context, in *GetRoleRequest, opts ...grpc.CallOption) (*Role, error)
		// UpdateRole 更新角色信息
		UpdateRole(ctx context.Context, in *UpdateRoleRequest, opts ...grpc.CallOption) (*Role, error)
		// DeleteRole 删除角色（软删除）
		DeleteRole(ctx context.Context, in *DeleteRoleRequest, opts ...grpc.CallOption) (*DeleteRoleResponse, error)
		// ListRoles 分页查询角色列表
		ListRoles(ctx context.Context, in *ListRolesRequest, opts ...grpc.CallOption) (*ListRolesResponse, error)
		// AssignRolePermission 为角色分配单个权限
		AssignRolePermission(ctx context.Context, in *AssignRolePermissionRequest, opts ...grpc.CallOption) (*AssignRolePermissionResponse, error)
		// AssignRolePermissions 为角色批量分配权限
		AssignRolePermissions(ctx context.Context, in *AssignRolePermissionsRequest, opts ...grpc.CallOption) (*AssignRolePermissionsResponse, error)
		// RemoveRolePermission 移除角色的单个权限
		RemoveRolePermission(ctx context.Context, in *RemoveRolePermissionRequest, opts ...grpc.CallOption) (*RemoveRolePermissionResponse, error)
		// RemoveRolePermissions 批量移除角色的权限
		RemoveRolePermissions(ctx context.Context, in *RemoveRolePermissionsRequest, opts ...grpc.CallOption) (*RemoveRolePermissionsResponse, error)
		// GetRolePermissions 获取角色拥有的所有权限
		GetRolePermissions(ctx context.Context, in *GetRolePermissionsRequest, opts ...grpc.CallOption) (*GetRolePermissionsResponse, error)
		// CheckRolePermission 检查角色是否拥有指定权限
		CheckRolePermission(ctx context.Context, in *CheckRolePermissionRequest, opts ...grpc.CallOption) (*CheckRolePermissionResponse, error)
	}

	defaultRoleService struct {
		cli zrpc.Client
	}
)

func NewRoleService(cli zrpc.Client) RoleService {
	return &defaultRoleService{
		cli: cli,
	}
}

// CreateRole 创建新角色
func (m *defaultRoleService) CreateRole(ctx context.Context, in *CreateRoleRequest, opts ...grpc.CallOption) (*CreateRoleResponse, error) {
	client := iam.NewRoleServiceClient(m.cli.Conn())
	return client.CreateRole(ctx, in, opts...)
}

// GetRole 根据ID获取角色详情
func (m *defaultRoleService) GetRole(ctx context.Context, in *GetRoleRequest, opts ...grpc.CallOption) (*Role, error) {
	client := iam.NewRoleServiceClient(m.cli.Conn())
	return client.GetRole(ctx, in, opts...)
}

// UpdateRole 更新角色信息
func (m *defaultRoleService) UpdateRole(ctx context.Context, in *UpdateRoleRequest, opts ...grpc.CallOption) (*Role, error) {
	client := iam.NewRoleServiceClient(m.cli.Conn())
	return client.UpdateRole(ctx, in, opts...)
}

// DeleteRole 删除角色（软删除）
func (m *defaultRoleService) DeleteRole(ctx context.Context, in *DeleteRoleRequest, opts ...grpc.CallOption) (*DeleteRoleResponse, error) {
	client := iam.NewRoleServiceClient(m.cli.Conn())
	return client.DeleteRole(ctx, in, opts...)
}

// ListRoles 分页查询角色列表
func (m *defaultRoleService) ListRoles(ctx context.Context, in *ListRolesRequest, opts ...grpc.CallOption) (*ListRolesResponse, error) {
	client := iam.NewRoleServiceClient(m.cli.Conn())
	return client.ListRoles(ctx, in, opts...)
}

// AssignRolePermission 为角色分配单个权限
func (m *defaultRoleService) AssignRolePermission(ctx context.Context, in *AssignRolePermissionRequest, opts ...grpc.CallOption) (*AssignRolePermissionResponse, error) {
	client := iam.NewRoleServiceClient(m.cli.Conn())
	return client.AssignRolePermission(ctx, in, opts...)
}

// AssignRolePermissions 为角色批量分配权限
func (m *defaultRoleService) AssignRolePermissions(ctx context.Context, in *AssignRolePermissionsRequest, opts ...grpc.CallOption) (*AssignRolePermissionsResponse, error) {
	client := iam.NewRoleServiceClient(m.cli.Conn())
	return client.AssignRolePermissions(ctx, in, opts...)
}

// RemoveRolePermission 移除角色的单个权限
func (m *defaultRoleService) RemoveRolePermission(ctx context.Context, in *RemoveRolePermissionRequest, opts ...grpc.CallOption) (*RemoveRolePermissionResponse, error) {
	client := iam.NewRoleServiceClient(m.cli.Conn())
	return client.RemoveRolePermission(ctx, in, opts...)
}

// RemoveRolePermissions 批量移除角色的权限
func (m *defaultRoleService) RemoveRolePermissions(ctx context.Context, in *RemoveRolePermissionsRequest, opts ...grpc.CallOption) (*RemoveRolePermissionsResponse, error) {
	client := iam.NewRoleServiceClient(m.cli.Conn())
	return client.RemoveRolePermissions(ctx, in, opts...)
}

// GetRolePermissions 获取角色拥有的所有权限
func (m *defaultRoleService) GetRolePermissions(ctx context.Context, in *GetRolePermissionsRequest, opts ...grpc.CallOption) (*GetRolePermissionsResponse, error) {
	client := iam.NewRoleServiceClient(m.cli.Conn())
	return client.GetRolePermissions(ctx, in, opts...)
}

// CheckRolePermission 检查角色是否拥有指定权限
func (m *defaultRoleService) CheckRolePermission(ctx context.Context, in *CheckRolePermissionRequest, opts ...grpc.CallOption) (*CheckRolePermissionResponse, error) {
	client := iam.NewRoleServiceClient(m.cli.Conn())
	return client.CheckRolePermission(ctx, in, opts...)
}
